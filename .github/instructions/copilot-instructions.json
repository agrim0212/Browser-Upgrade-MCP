{
  "version": 1,
  "instructions": [
    {
      "name": "add-browser-upgrade-rule",
      "description": "Add a new browser upgrade rule to the specified <browser_name>_config.json (chrome, webview, trichrome, chromedriver).",
      "resources": [
        "config/<browser_name>_config.json",
        "lib/browser_upgrade_manager.rb"
      ],
      "steps": [
        "Parse the user's natural-language request and extract: browser_name, device_model(s), manufacturer(s), device_id(s), os_version conditions, chrome_version conditions, custom_function, dedicated_device flag, and action (version + variant + optional path).",
        "Understand that all fields in conditions are optional except at least one of device_model, manufacturer, device_id, os_version, chrome_version, custom_function, dedicated_device, or default must be specified.",
        "Recoganize that action must include at least version or variant, and path is optional.",
        "All the fields inside the conditions structure are enforced as `and` conditions. whereas multiple device_model or manufacturer values are treated as `or` conditions.",
        "Open the target config file: config/<browser_name>_config.json. If <browser_name> is 'chrome', also consider applying rules to 'webview' and 'trichrome' when requested.",
        "Validate the requested rule fields against schema/browser_rule_schema.json. If schema file is missing, enforce the following minimal structure: {\"id\":\"string\",\"conditions\":{},\"action\":{}}.",
        "Generate a descriptive rule id using the pattern: `<lower_snake_browser>_<primary_device_or_manufacturer>_<os_or_chrome>-v<short>`. Examples: 'pixel8_android14_chrome138' or 'sm_s926b_android15'. Ensure unique id (append numerical suffix when conflict).",
        "Check existing rules for an exact match on device_id or device_model + os_version (exact same conditions). If an identical rule exists, update its action with the new version/variant (and path if provided).",
        "If no exact match exists, insert the new rule into the rules array ensuring sorting by priority (device_id > custom_function > dedicated_device > device_model > manufacturer > os_version > default).",
        "Run JSON validation using `jq` or Ruby's JSON parser (e.g., `ruby -r json -e 'JSON.parse(File.read(\"config/<browser_name>_config.json\"))'`) and fail with a human-readable message if invalid.",
        "Run a local config sanity check: run `ruby lib/browser_upgrade_manager.rb <example_device_id> handle_chrome_driver_path <browser_name>` (or other safe dry-run command) when an example device id is available in docs; capture and surface errors.",
        "Produce a short summary of the change: what file changed, rule id, conditions, and action.",
        "Commit the change with a message: 'config: add/modify <rule_id> for <browser_name> (added by Copilot)'. If running under PR automation, open a draft PR and include the summary in the PR description."
      ]
    },
    {
      "name": "update-os-version-range",
      "description": "Update os_version conditions for one or many rules in a browser config.",
      "resources": [
        "config/<browser_name>_config.json",
        "schema/browser_rule_schema.json"
      ],
      "steps": [
        "Locate rules matching the supplied device_model(s) or manufacturer(s).",
        "Modify the rule's 'os_version' block to the requested conditions (lt/lte/gt/gte/eq/neq).",
        "If a change would cause overlapping/conflicting ranges with a higher-priority rule, add or update a more specific rule instead of editing the higher-priority rule.",
        "Validate JSON and run the Ruby local sanity check as in 'add-browser-upgrade-rule'.",
        "Commit as: 'config: update OS range for <identifier> in <browser_name>_config.json'."
      ]
    },
    {
      "name": "add-chromedriver-compatibility",
      "description": "Add or update chromedriver compatibility rules (chrome_version conditions) in chromedriver_config.json.",
      "resources": [
        "config/chromedriver_config.json",
        "schema/browser_rule_schema.json"
      ],
      "steps": [
        "Create or update a rule in chromedriver_config.json with the 'chrome_version' conditions (lt/lte/gt/gte/eq/neq) to map to the right chromedriver 'action.path' or 'action.version'.",
        "Ensure no overlapping compatibility ranges exist. If overlap is unavoidable, prefer more specific rules first, following priority sorting.",
        "Validate the file and run a dry-run using BrowserUpgradeManager.handle_chrome_driver_path if an ADB/device is available or provide a simulated test invocation.",
        "Commit as: 'config: update ChromeDriver mapping for Chrome <version-range>'."
      ]
    },
    {
      "name": "add-device-exception",
      "description": "Add a device-specific exception rule (device_model or device_id) to avoid problematic versions.",
      "resources": [
        "config/<browser_name>_config.json"
      ],
      "steps": [
        "Add a device_id or device_model condition with either 'in' or 'regex' to precisely match the problematic device(s).",
        "Set the 'action' to a stable browser version or to a safe fallback variant. Optionally include a comment (if allowed) describing the crash/issue.",
        "Place the rule high in priority (device_id rules go at top).",
        "Validate JSON and run local sanity checks.",
        "Commit as: 'config: add device-specific exception for <device_id_or_model>'."
      ]
    },
    {
      "name": "validate-config",
      "description": "Validate <browser_name>_config.json against the canonical schema and the manager's expectations.",
      "resources": [
        "schema/browser_rule_schema.json",
        "lib/browser_upgrade_manager.rb"
      ],
      "steps": [
        "Open config/<browser_name>_config.json and schema/browser_rule_schema.json.",
        "Check that every rule has: id (string), conditions (object), and action (object).",
        "Verify recognized condition keys: default, custom_function, dedicated_device, device_id, device_model, manufacturer, os_version, chrome_version.",
        "For each operator inside conditions, ensure operators are one of the supported set (lt, lte, gt, gte, eq, neq, in, not_in, regex).",
        "Ensure at least one default rule exists per browser to prevent runtime failures. If missing, add a TODO default rule with action set to a known safe version.",
        "Return a validation report listing errors or 'OK' if none found."
      ]
    },
    {
      "name": "run-local-sanity-check",
      "description": "Run a non-destructive local test using the Ruby manager to ensure no runtime exceptions for common code paths.",
      "resources": [
        "lib/browser_upgrade_manager.rb",
        "config/*.json"
      ],
      "steps": [
        "If an example device id is available in docs, run: `ruby lib/browser_upgrade_manager.rb <example_device_id> handle_chrome_driver_path chrome` and capture output. Otherwise run a non-ADB path that invokes find_matching_rule for a simulated device (if test helpers exist).",
        "If the Ruby script raises, copy the stderr and present the failing rule or JSON path to the user.",
        "If passing, include the output path or version written to the ExitFile as proof."
      ]
    },
    {
      "name": "summarize-config",
      "description": "Produce a human-readable summary of active rules grouped by device_model, OS ranges, manufacturer, and default rules.",
      "resources": [
        "config/<browser_name>_config.json"
      ],
      "steps": [
        "Load the config file and group rules by device_model keys when present, then by manufacturer then by os_version then default.",
        "For each group include rule id, conditions summary, and action summary (version/variant/path).",
        "Highlight device-specific overrides and any missing default rules.",
        "Return a short markdown summary suitable for PR description."
      ]
    }
  ]
}
